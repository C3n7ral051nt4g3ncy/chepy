from ..core import ChepyCore as ChepyCore, ChepyDecorators as ChepyDecorators
from .exceptions import StateNotDict as StateNotDict, StateNotList as StateNotList
from typing import Any, TypeVar, Union

UtilsT = TypeVar('UtilsT', bound='Utils')

class Utils(ChepyCore):
    def __init__(self, *data: Any) -> None: ...
    state: Any = ...
    def reverse(self, count: int=...) -> UtilsT: ...
    def count_occurances(self, regex: str, case_sensitive: bool=...) -> UtilsT: ...
    def remove_whitespace(self, spaces: bool=..., carriage_return: bool=..., line_feeds: bool=..., tabs: bool=..., form_feeds: bool=...) -> Any: ...
    def remove_nullbytes(self) -> UtilsT: ...
    def regex_search(self, pattern: str, ignore_case: bool=..., multiline: bool=..., dotall: bool=..., unicode: bool=..., extended: bool=...) -> Any: ...
    def split_by(self, pattern: str=..., trim: Any=...) -> UtilsT: ...
    def split_by_n(self, n: int) -> UtilsT: ...
    def select_every_n(self, n: int, start: int=...) -> UtilsT: ...
    def unique(self) -> UtilsT: ...
    def sort_list(self, reverse: bool=...) -> UtilsT: ...
    def sort_dict_key(self, reverse: bool=...) -> UtilsT: ...
    def sort_dict_value(self, reverse: Any=...) -> UtilsT: ...
    def filter_list(self, by: Union[str, dict], regex: bool=...) -> UtilsT: ...
    def filter_list_by_length(self, length: int, exact: bool=...) -> UtilsT: ...
    def filter_dict_key(self, by: str) -> UtilsT: ...
    def filter_dict_value(self, by: str) -> UtilsT: ...
    def slice(self, start: int=..., end: int=...) -> UtilsT: ...
    def find_replace(self, pattern: str, repl: str, ignore_case: Any=...) -> UtilsT: ...
    def escape_string(self) -> UtilsT: ...
    def unescape_string(self) -> UtilsT: ...
    def color_hex_to_rgb(self) -> UtilsT: ...
    def diff(self, state: int=..., buffer: int=..., colors: bool=..., swap: bool=...) -> Any: ...
    def pad(self, width: int, direction: str=..., char: str=...) -> UtilsT: ...
    def count(self) -> UtilsT: ...
    def set(self) -> UtilsT: ...
    def regex_to_str(self, all_combo: bool=...) -> UtilsT: ...
