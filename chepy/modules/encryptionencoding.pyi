from ..core import ChepyCore as ChepyCore, ChepyDecorators as ChepyDecorators
from ..extras.combinatons import hex_chars as hex_chars
from .internal.constants import EncryptionConsts as EncryptionConsts
from typing import Any, TypeVar

jwt: Any
AES: Any
ARC4: Any
DES: Any
DES3: Any
Blowfish: Any
EncryptionEncodingT = TypeVar('EncryptionEncodingT', bound='EncryptionEncoding')

class EncryptionEncoding(ChepyCore):
    def __init__(self, *data: Any) -> None: ...
    state: Any = ...
    def rotate(self, rotate_by: int) -> EncryptionEncodingT: ...
    def rotate_bruteforce(self) -> EncryptionEncodingT: ...
    def rot_13(self) -> EncryptionEncodingT: ...
    def rot_47(self) -> EncryptionEncodingT: ...
    def xor(self, key: str, key_type: str=..., ascii: bool=...) -> EncryptionEncodingT: ...
    def xor_bruteforce(self, length: int=...) -> EncryptionEncodingT: ...
    def jwt_decode(self) -> EncryptionEncodingT: ...
    def jwt_verify(self, secret: str, algorithm: list=...) -> EncryptionEncodingT: ...
    def jwt_sign(self, secret: str, algorithms: str=...) -> EncryptionEncodingT: ...
    def jwt_bruteforce(self, wordlist: str, b64_encode: bool=..., algorithm: list=...) -> Any: ...
    def rc4_encrypt(self, key: str, hex_key: bool=...) -> EncryptionEncodingT: ...
    def rc4_decrypt(self, key: str, hex_key: bool=...) -> EncryptionEncodingT: ...
    def des_encrypt(self, key: str, iv: str=..., mode: str=..., hex_key: bool=..., hex_iv: bool=...) -> Any: ...
    def des_decrypt(self, key: str, iv: str=..., mode: str=..., hex_key: bool=..., hex_iv: bool=...) -> Any: ...
    def triple_des_encrypt(self, key: str, iv: str=..., mode: str=..., hex_key: bool=..., hex_iv: bool=...) -> Any: ...
    def triple_des_decrypt(self, key: str, iv: str=..., mode: str=..., hex_key: bool=..., hex_iv: bool=...) -> Any: ...
    def aes_encrypt(self, key: str, iv: str=..., mode: str=..., hex_key: bool=..., hex_iv: bool=...) -> Any: ...
    def aes_decrypt(self, key: str, iv: str=..., mode: str=..., hex_key: bool=..., hex_iv: bool=...) -> Any: ...
    def blowfish_encrypt(self, key: str, iv: str=..., mode: str=..., hex_key: bool=..., hex_iv: bool=...) -> Any: ...
    def blowfish_decrypt(self, key: str, iv: str=..., mode: str=..., hex_key: bool=..., hex_iv: bool=...) -> Any: ...
    def vigenere_encode(self, key: str) -> EncryptionEncodingT: ...
    def vigenere_decode(self, key: str) -> EncryptionEncodingT: ...
    def affine_encode(self, a: int=..., b: int=...) -> EncryptionEncodingT: ...
    def affine_decode(self, a: int=..., b: int=...) -> EncryptionEncodingT: ...
    def atbash_encode(self) -> EncryptionEncodingT: ...
    def atbash_decode(self) -> EncryptionEncodingT: ...
    def to_morse_code(self, dot: str=..., dash: str=..., letter_delim: str=..., word_delim: str=...) -> Any: ...
    def from_morse_code(self, dot: str=..., dash: str=..., letter_delim: str=..., word_delim: str=...) -> Any: ...
