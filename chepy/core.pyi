from typing import Any, List, Tuple, Union, TypeVar

jsonpickle: Any

ChepyCoreT = TypeVar('ChepyCoreT', bound='ChepyCore')

class ChepyDecorators:
    @staticmethod
    def call_stack(func: Any, *args: Any, **kwargs: Any): ...

class ChepyCore:
    states: Any = ...
    buffers: Any = ...
    write: Any = ...
    bake: Any = ...
    cyberchef: Any = ...
    read_file: Any = ...
    log_level: Any = ...
    log_format: str = ...
    def __init__(self, *data: Any) -> None: ...
    @property
    def state(self): ...
    @state.setter
    def state(self: ChepyCoreT, val: Any) -> None: ...
    def fork(self: ChepyCoreT, methods: List[Tuple[Union[str, object], dict]]) -> ChepyCoreT: ...
    def set_state(self: ChepyCoreT, data: Any) -> ChepyCoreT: ...
    def create_state(self: ChepyCoreT): ...
    def copy_state(self: ChepyCoreT, index: int=...) -> ChepyCoreT: ...
    def change_state(self: ChepyCoreT, index: int) -> ChepyCoreT: ...
    def switch_state(self: ChepyCoreT, index: int) -> ChepyCoreT: ...
    def delete_state(self: ChepyCoreT, index: int) -> ChepyCoreT: ...
    def get_state(self: ChepyCoreT, index: int) -> ChepyCoreT: ...
    def save_buffer(self: ChepyCoreT, index: int=...) -> ChepyCoreT: ...
    def load_buffer(self: ChepyCoreT, index: int) -> ChepyCoreT: ...
    def delete_buffer(self: ChepyCoreT, index: int) -> ChepyCoreT: ...
    def substring(self: ChepyCoreT, pattern: Union[str, bytes], group: int=...) -> ChepyCoreT: ...
    @property
    def o(self): ...
    @property
    def output(self: ChepyCoreT): ...
    def out(self: ChepyCoreT) -> ChepyCoreT: ...
    def out_as_str(self: ChepyCoreT) -> str: ...
    def out_as_bytes(self: ChepyCoreT) -> bytes: ...
    def get_by_index(self: ChepyCoreT, index: int) -> ChepyCoreT: ...
    def get_by_key(self: ChepyCoreT, key: str) -> ChepyCoreT: ...
    def copy_to_clipboard(self: ChepyCoreT) -> None: ...
    def copy(self: ChepyCoreT) -> None: ...
    def web(self: ChepyCoreT, magic: bool=..., cyberchef_url: str=...) -> None: ...
    def http_request(self: ChepyCoreT, method: str=..., params: dict=..., json: dict=..., headers: dict=..., cookies: dict=...) -> ChepyCoreT: ...
    def load_from_url(self: ChepyCoreT, method: str=..., params: dict=..., json: dict=..., headers: dict=..., cookies: dict=...) -> ChepyCoreT: ...
    def load_dir(self: ChepyCoreT, pattern: str=...) -> ChepyCoreT: ...
    def load_file(self: ChepyCoreT, binary_mode: bool=...) -> ChepyCoreT: ...
    def write_to_file(self: ChepyCoreT, path: str) -> None: ...
    def write_binary(self: ChepyCoreT, path: str) -> None: ...
    def save_recipe(self: ChepyCoreT, path: str) -> ChepyCoreT: ...
    def load_recipe(self: ChepyCoreT, path: str) -> ChepyCoreT: ...
    def run_script(self: ChepyCoreT, path: str, save_state: bool=...) -> ChepyCoreT: ...
    def loop(self: ChepyCoreT, iterations: int, callback: str, args: dict=...) -> ChepyCoreT: ...
    def loop_list(self: ChepyCoreT, callback: str, args: dict=...) -> ChepyCoreT: ...
    def loop_dict(self: ChepyCoreT, keys: list, callback: str, args: dict=...) -> ChepyCoreT: ...
    def debug(self: ChepyCoreT, verbose: bool=...) -> ChepyCoreT: ...
    def reset(self: ChepyCoreT): ...
    def load_command(self: ChepyCoreT): ...
    def pretty(self: ChepyCoreT, indent: int=...) -> ChepyCoreT: ...
    def plugins(self: ChepyCoreT, enable: str) -> None: ...
    def set_plugin_path(self: ChepyCoreT, path: str) -> None: ...
